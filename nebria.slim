initialize() {
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(dimensionality="xy");
	initializeMutationRate(0.0);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 99999);
	initializeRecombinationRate(1e-8);
	
	defineConstant("P_D", 0.2); // dispersal probability
	defineConstant("MEAN_HOPS", 20); // mean number of dispersal hops
	defineConstant("SIGMA", 0.1); // dispersal distance
	defineConstant("MAP_RES", 0.01); // resolution
	defineConstant("A", MAP_RES * MAP_RES);
	defineConstant("LAMBDA", 5.0);  // mean fecundity
	defineConstant("K", 30 / A);  // mean density per unit area
	defineConstant("EPS", 0.01); // relative 'density' in bad habitat
	defineConstant("NUM_INIT", 100); // number of initial populations
	defineConstant("MAX_SIZE", 1e5);
	defineGlobal("TOTAL", 0);
	
	// spatial interactions
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=2 * MAP_RES);
	i1.setInteractionFunction("n", 1/(2 * PI * A), MAP_RES);
}

1 late() {
	habitat = Image("habitat.png");
	width = habitat.width * MAP_RES;
	height = habitat.height * MAP_RES;
	good = which(habitat.floatK > 0);
	good = sample(good, min(length(good), NUM_INIT));
	good_x = MAP_RES * rep(seqLen(habitat.width), habitat.height)[good];
	good_y = MAP_RES * repEach(seqLen(habitat.height), habitat.width)[good];
	N = asInteger(K * length(good) * A);
	if (N > MAX_SIZE) stop("Too many individuals: " + N);
	sim.addSubpop("p1", N);
	p1.setSpatialBounds(c(0.0, 0.0, width, height));
	cat("Setting up a population with " + N + " individuals");
	cat(" and spatial bounds of " + paste(p1.spatialBounds));
	catn(" and " + length(good) + " patches of good habitat.");
	p1.defineSpatialMap('habitat', 'xy', habitat.floatK,
		valueRange=c(EPS, 1.0), colors=c("#000000", "#FFFFFF"));
	for (ind in p1.individuals) {
		pos = sample(seqLen(length(good)), size=1);
		ind.setSpatialPosition(
			c(good_x[pos], good_y[pos])
			+ rnorm(2, sd=SIGMA/10)
		);
	}
}

reproduction() {
	individual.tag = 0;
	// SHOULD MATE CHOICE COME BEFORE DISPERSAL??
	mate = i1.drawByStrength(individual);
	if (length(mate) > 0) {
		for (k in seqLen(rpois(1, LAMBDA))) {
			loc = individual.spatialPosition;
			if (runif(1) < P_D) {
				// move around but stop in good habitat
				while (runif(1) * MEAN_HOPS < 1) {
					loc = loc + rnorm(2, mean=0, sd=SIGMA / sqrt(MEAN_HOPS));
					if (p1.spatialMapValue('habitat', loc) > 0)
						break;
				}
			}
			if (p1.pointInBounds(loc)) {
				individual.tag = individual.tag + 1;
				child = subpop.addCrossed(individual, subpop.sampleIndividuals(1));
				child.setSpatialPosition(loc);
			}
		}
	}
}

late() {
	i1.evaluate();
}

2: early() {
	i1.evaluate();
	inds = p1.individuals;
	inds[inds.age > 0].fitnessScaling = 0.0;
	// cannibalism
	larvae = inds[inds.age == 0];
	density = i1.totalOfNeighborStrengths(larvae);
	habitat = p1.spatialMapValue('habitat', larvae.spatialPosition);
	larvae.fitnessScaling = pmax(EPS, habitat) * K/density;
}

2: early() {
	catn("Generation: " + sim.generation + " early: " + p1.individualCount);
	if (p1.individualCount == 0 | p1.individualCount > MAX_SIZE) stop("Stopping: " + N + " individuals.");
}

1: late() {
	catn("Generation: " + sim.generation + " late: " + p1.individualCount);
	if (p1.individualCount == 0 | p1.individualCount > MAX_SIZE) stop("Stopping: " + p1.individualCount + " individuals.");
}

2000 late() {
	catn("Done!");
}
