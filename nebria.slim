initialize() {
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(dimensionality="xy");
	initializeSex("A");
	initializeTreeSeq();
	// these are default params that can be modified with -d at runtime
	// or read in from "params.slim"
	defaults = Dictionary(
		"P_D", 0.01, // dispersal probability
		"MEAN_HOPS", 20, // mean number of dispersal hops
		"DISPERSAL_SIGMA", 1.0, // dispersal distance, in km
		"MAP_RES_X", 0.742, // resolution in km (see make_maps.R)
		"MAP_RES_Y", 0.925, // resolution in km (see make_maps.R)
		"POP_SIZE", 100, // mean number per patch
		"LAMBDA", 5.0,  // mean fecundity
		"EPS", 0.01, // relative 'density' in bad habitat
		"PROP_INIT", 0.1, // proportion of initially occupied patches
		"HABITAT_SIGMA", 1/sqrt(200), // SD of how much habitat quality changes per year
		"L", 1e6, // length of the genome
		"SUITABILITY_MAP", "geo_only_suitability.png", // suitability raster
		// the habitat is entirely RASTER[k] at RASTER_SWITCH_TIMES_AGO[k]
		"RASTERS", c("HS15_17.png",
		             "BA13_15.png",
		             "EH8_12.png",
		             "MH4_8.png",
		             "LH0_4.png", // note that LH0_4 looks like today (but lower-res)
		             "current.png"),
		"RASTER_BBOX", c(-119.9996, -117.99993, 35.9995, 38.01215), // the output from bbox()
		"RASTER_SWITCH_TIMES_AGO", c(16, 14, 10, 6, 2, 0) * 1000, // converted to generations below
		"YEAR_SHAPE", 1.5, // shape parameter in gamma distribution of year effects
		"DEBUG", T,
		"STEPSIZE", 100,  // years per generation (to make debugging go faster)
		"MAX_SIZE", 2e5,
		"NUM_GENS", 100,
		"OUTDIR", "."
		);
	paramfile = defaults.getValue("OUTDIR") + "/" + "params.json";
	if (fileExists(paramfile)) {
		local_defaults = Dictionary(paste(readFile(paramfile), sep="\n"));
		defaults.addKeysAndValuesFrom(local_defaults);
	}
	defaults.setValue("OUTPATH", defaults.getValue("OUTDIR") + "/sim_" + getSeed() + ".trees");
	defaults.setValue("LOGPATH", defaults.getValue("OUTDIR") + "/sim_" + getSeed() + ".log");
	
	catn("-------------\n");
	for (k in defaults.allKeys) {
		if (!exists(k)) {
			defineConstant(k, defaults.getValue(k));
		} else {
			defaults.setValue(k, executeLambda(paste(c(k, ";"), sep='')));
		}
		catn("  " + k + ": " + defaults.getValue(k));
	}
	catn("-------------\n");
	defineGlobal("params", defaults);
	
	defineConstant("K", POP_SIZE / (MAP_RES_X * MAP_RES_Y));  // mean density per unit area
	defineConstant("MAP_RES", max(MAP_RES_X, MAP_RES_Y));
	defineConstant("RASTER_SWITCH_STEPS", asInteger(NUM_GENS - RASTER_SWITCH_TIMES_AGO / STEPSIZE));
	defineConstant("SIGMA", DISPERSAL_SIGMA / sqrt(MEAN_HOPS));
	defineConstant("YEAR_MEAN", exp(1/(2*YEAR_SHAPE)) / YEAR_SHAPE); // defined so that mean(log(year effect)) is near zero
	
	initializeMutationRate(0.0);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, L-1);
	initializeRecombinationRate(1e-8);
	
	defineGlobal("TOTAL", 0);
	defineGlobal("RASTER_NUM", min(which(RASTER_SWITCH_TIMES_AGO > 0)));
	defineGlobal("LAST_HABITAT", Image(RASTERS[max(0, RASTER_NUM - 1)]));
	defineGlobal("NEXT_HABITAT", Image(RASTERS[RASTER_NUM]));
	defineGlobal("NUM_JUVENILES", 0);
	
	if (STEPSIZE != 1)
		catn("DEBUG: STEPSIZE is not equal to 1: running a coarse simulation!.");
	if (DEBUG)
		catn("DEBUG: in DEBUG mode! Things will be slower.");
	
	// spatial interactions
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=2 * MAP_RES);
	i1.setInteractionFunction("n", 1/(2 * PI * MAP_RES * MAP_RES), MAP_RES);

}

1 early() {
	log = sim.createLogFile(LOGPATH, initialContents="# ", logInterval=1);
	log.addGeneration();
	log.addGenerationStage();
	log.addPopulationSize();
	log.addCustomColumn("num_juveniles", "NUM_JUVENILES;");
	if (DEBUG) {
		log.addMeanSDColumns("num_hops", "p1.individuals.getValue('num_hops');");
		log.addCustomColumn("prop_dispersers", "mean(p1.individuals.getValue('distance') > sqrt(2) * MAP_RES);");
		log.addMeanSDColumns("distance", "p1.individuals.getValue('distance');");
		log.addMeanSDColumns("children", "p1.individuals.getValue('children');");
	}
}

s1 999 late() {
	// switch rasters
	defineGlobal("RASTER_NUM", RASTER_NUM + 1);
	catn("Generation " + sim.generation + ": Interpolating from " + RASTERS[RASTER_NUM - 1] + "(" + (RASTER_NUM-1) + ") to " + RASTERS[RASTER_NUM] + "(" + RASTER_NUM + ").");
	defineGlobal("LAST_HABITAT", Image(RASTERS[RASTER_NUM - 1]));
	defineGlobal("NEXT_HABITAT", Image(RASTERS[RASTER_NUM]));
}

// End of simulation
s99 2000 late() {
	catn("Done!");
	sim.treeSeqOutput(OUTPATH, metadata=params);
	sim.simulationFinished();
}

// Schedule switching of rasters and output
1 late() {
	this_num = max(0, RASTER_NUM - 1);
	catn("Starting with raster" + RASTERS[this_num]
		+ "(" + this_num + ") and interpolating to " + RASTERS[RASTER_NUM]
		+ "(" + RASTER_NUM + ").");
	switch_gens = RASTER_SWITCH_STEPS[RASTER_SWITCH_STEPS > 0 & RASTER_SWITCH_STEPS < NUM_GENS];
	if (length(switch_gens) > 0) sim.rescheduleScriptBlock(s1, generations=switch_gens);
	
	sim.rescheduleScriptBlock(s99, generations=NUM_GENS);
}

1 late() {
	// FOR DEBUGGING: to see an extra map
	if (DEBUG) sim.addSubpop("p2", 1);
}

1 late() {
	habitat = LAST_HABITAT;
	suitability = Image(SUITABILITY_MAP);
	width = habitat.width * MAP_RES_X;
	height = habitat.height * MAP_RES_Y;
	num_patches = sum(habitat.floatG > EPS);
	num_init = asInteger(PROP_INIT * num_patches);
	N = asInteger(K * num_init * MAP_RES_X * MAP_RES_Y);
	if (N > MAX_SIZE) stop("Too many individuals: " + N);
	sim.addSubpop("p1", N);
	
	defineGlobal("DH", rep(1.0, length(habitat.floatG)));
	for (p in sim.subpopulations) {
		p.setSpatialBounds(c(0.0, 0.0, width, height));
		p.defineSpatialMap('habitat', 'xy', habitat.floatG,
			valueRange=c(0.0, 1.0), colors=c("#000000", "#FFFFFF"));
		p.defineSpatialMap('suitability', 'xy', suitability.floatK,
			valueRange=c(0.0, 1.0), colors=c("#000000", "#FFFFFF"));
	}
	cat("Setting up a population with " + N + " individuals");
	cat(" and spatial bounds of " + paste(p1.spatialBounds));
	catn(" and " + num_patches + " patches of good habitat.");
	
	good = matrix(rep(-1.0, num_init*2), nrow=num_init);
	for (k in seqLen(num_init)) {
		pos = p1.pointUniform();
		while (p1.spatialMapValue('habitat', pos) < EPS) {
			pos = p1.pointUniform();
		}
		good[k,] = pos;
	}
	// need to randomize order since the females are the first half of the vector
	for (k in sample(seqLen(p1.individualCount), p1.individualCount)) {
		ind = p1.individuals[k];
		pos = good[sample(seqLen(nrow(good)), size=1),];
		assert(p1.spatialMapValue('habitat', pos) > EPS);
		ind.setSpatialPosition(
			pos
			+ rnorm(2, sd=SIGMA)
			);
		if (DEBUG) {
			for (key in c("num_hops", "num_hop_tries", "children", "distance")) {
				ind.setValue(key, 0);
			}
		}
	}
}

2: late() {
	// update spatial map
	if (RASTER_NUM > 0) {
		a = (sim.generation - RASTER_SWITCH_STEPS[RASTER_NUM - 1])/ (RASTER_SWITCH_STEPS[RASTER_NUM] - RASTER_SWITCH_STEPS[RASTER_NUM - 1]);
	} else {
		a = 1.0;
	}
	for (p in sim.subpopulations) {
		defineGlobal("DH", 1 - abs(1 - (abs(DH + rnorm(length(DH), 0, HABITAT_SIGMA)) % 2)));
		h = ( (1-a) * LAST_HABITAT.floatG + a * NEXT_HABITAT.floatG )
		     * DH  // gradual habitat change
		     * rgamma(length(DH), mean=YEAR_MEAN, shape=YEAR_SHAPE);  // randomness due to goodness of the year
      p.defineSpatialMap('habitat', 'xy', h,
			valueRange=c(0.0, 1.0), colors=c("#000000", "#FFFFFF"));
	}
}

reproduction(p1, "F") {
	individual.tag = 0;
	// SHOULD MATE CHOICE COME BEFORE DISPERSAL??
	mate = i1.drawByStrength(individual);
	if ((length(mate) > 0)) {
		for (tries in 1:10) {
			if (mate.sex == "M") break;
			mate = i1.drawByStrength(individual);
		}
		if (mate.sex == "M") {
			for (k in seqLen(rpois(1, LAMBDA))) {
				// begin with one hop
				loc = individual.spatialPosition;
				num_hops = 0;
				tries = 0;
				init_loc = loc;
				if (runif(1) < P_D) {
					// start with one hop
					loc = loc + rnorm(2, mean=0, sd=SIGMA);
					num_hops = 1;
					// NegBinom(r, p) is Pois(Gamma(shape=r, rate=(1-p)/p))
					k = rpois(1, rexp(1, mu=MEAN_HOPS));
					while (num_hops < k & tries < 1000) {
						current = p1.spatialMapValue('suitability', loc);
						next_loc = loc + rnorm(2, mean=0, sd=SIGMA);
						if (runif(1) * current <= p1.spatialMapValue('suitability', next_loc)) {
							loc = next_loc;
							num_hops = num_hops + 1;
						}
						tries = tries + 1;
					}
				}
				if (p1.pointInBounds(loc)) {
					individual.tag = individual.tag + 1;
					child = subpop.addCrossed(individual, mate);
					child.setSpatialPosition(loc);
					if (DEBUG) {
						child.setValue("num_hops", num_hops);
						child.setValue("num_hop_tries", tries);
						child.setValue("children", 0);
						child.setValue("distance", sqrt(sum((loc - init_loc)^2)));
						individual.setValue("children", individual.getValue("children") + 1);
						mate.setValue("children", mate.getValue("children") + 1);
					}
				}
			}
		}
	}
}

late() {
	i1.evaluate();
}

2: early() {
	i1.evaluate();
	inds = p1.individuals;
	inds[inds.age > 0].fitnessScaling = 0.0;
	// cannibalism
	larvae = inds[inds.age == 0];
	density = i1.totalOfNeighborStrengths(larvae);
	habitat = p1.spatialMapValue('habitat', larvae.spatialPosition);
	larvae.fitnessScaling = pmax(EPS, habitat) * K/density;
	defineGlobal("NUM_JUVENILES", length(larvae));
}

2: early() {
	catn("Generation: " + sim.generation + " early: " + p1.individualCount);
	if (p1.individualCount == 0 | p1.individualCount > MAX_SIZE) stop("Stopping: " + p1.individualCount + " individuals.");
}

1: late() {
	catn("Generation: " + sim.generation + "  late: " + p1.individualCount);
	if (p1.individualCount == 0 | p1.individualCount > MAX_SIZE) stop("Stopping: " + p1.individualCount + " individuals.");
}
